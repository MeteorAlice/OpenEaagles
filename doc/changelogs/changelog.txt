================================================================================
Changes since v16.11
================================================================================

--------------------------------------------------------------------------------
General framework-wide changes and improvements

- Moved all players, systems and component-based models from simulation library
  into models library

- Moved all interoperability implementation code into a new 'interop' library.
  This effectively removes circular references between 'simulation', 'models'
  and 'interop' (i.e, interoperability) and 'otw' functionality.

- In simulation library, created mostly abstract interface classes for NetIO,
  Otw, Player, Atmosphere and Terrain.  They serve as the connection between
  simulation infrastructure (i.e., architecture) and models.  Moved all
  model implementation code into respective libraries -- models, terrain, otw.
  The goal is to divorce, simplify and focus the contents of the 'simulation'
  library to defining the basic architecture of a simulation.  It is now much
  less concerned about models and interoperability interfaces.
  In domain driven design (DDD) literature, this is called refactoring a ball
  of mud into more clear individual boundary contexts. In other words, simplify
  for understanding, clarity and general improvement.

- Grouped somewhat obvious highly related models into subfolders within the models
  library.  This includes folders for players, systems, dynamic models, environment,
  navigation, etc.  This can be improved, but it's a good start.

- Updated through replacement 0's with nullptr.

- In Object, the method getSlotByIndex() has been removed.  Therefore any derived
  Object-based classes no longer need to define it.  For legacy code, methods of
  the form below (in all class definitions), should be deleted.

   base::Object* <<CLASSNAME>>::getSlotByIndex(const int si)
   {
      return BaseClass::getSlotByIndex(si);
   }

   This change simplifies the codebase by eliminating unused methods and
   reducing code clutter.

- Old logger functionality has been removed in favor of binary data recorder
  library.  The classes base::Logger, simulation::SimLogger and simulation::TabLogger
  have been removed.

- Changed osg references from aliased types (e.g., Vec3, Vec4, Matrix) to proper
  declaration of Vec3d, Vec4d, Matrixd and removed Vec3, Vec4 and Matrix include
  files which did nothing but include other files and define aliases (via typedef).
  Using include files that do nothing but include other include files is considered bad
  practice -- this clarifies the codebase by making it more explicit.

- started using 'auto' keyword to declare types in a significant way; specifically
  used in places that declare variables that are initialized with rather long and
  obvious type definitions.  For example:

  oe::models::Autopilot* ap = dynamic_cast<oe::models::Autopilot*>(av->getPilot());

  can be reduced to:

  auto ap = dynamic_cast<oe::models::Autopilot*>(av->getPilot());

- renamed many of the classes that are abstract to 'Abstract<classname>'.  For example,
  NetIO in simulation library became 'AbstractNetIO'.  This makes those classes more
  obvious in the role they place in relation to other classes.  Often they define a
  set of functionality that is common or shared with subclasses.

--------------------------------------------------------------------------------
base library

   Object class
     -- removed getSlotByIndex() and getSlotByName() methods - both were unused.
     -- extracted defined '_Static' structure out of Object and into it's own
        standalone class called ClassMetadata, which is what it is.  Updated
        Object itself to use a variable called 'metadata' in lue of '_static'
        to store class and object related metadata.  This has NO impact on API,
        but does make the code more readable.
     -- removed both registerClass() and WriteClassList() methods and underlying
        support structure to maintain a list of classes compiled into an application.
        This was used so that a developer could print out a list of classes
        available within application and interesting metadata related to them,
        such as the number of instances currently in existance.  In theory,
        this information could be used to help debug memory leaks within a running
        application.  Not only can this capability be replicated outside of
        Object itself, other tools exist (e.g., Valgrind) that are much more
        comprehensive in this area. Removing the code associated with all this
        greatly simplifies Object, its associated macros and instance creation.
        It also reduces the barrier to understanding what the code is doing.
     -- removed getClassName() method

   ObjMetadata
     -- new class that replaces _Static class once defined in Object
     -- added getClassName() and getFactoryName() to this newly defined class.
        The goal is to move all 'meta' data about classes and objects including
        static class functionality into this class.

   Component class
     -- component-based data logger functionality has been removed.  Removal of
        rippled into simulation library with the deletion of SimLogger and
        TabLogger classes.

   SlotTable class
     -- removed useless methods such as copyData, deleteData -- probably remnant
        from long ago, when it might have been an Object-based class.
     -- deleted copy and assignment operators

--------------------------------------------------------------------------------
dafif library


--------------------------------------------------------------------------------
dis library

--------------------------------------------------------------------------------
glut library

--------------------------------------------------------------------------------
graphics library


--------------------------------------------------------------------------------
hla library


--------------------------------------------------------------------------------
instruments library


--------------------------------------------------------------------------------
iodevice library


--------------------------------------------------------------------------------
linearsystem library


--------------------------------------------------------------------------------
models library

   WorldModel
      -- Contains the guts of what used to be in Simulation class concerning
         the modeled world -- class does not contain any code related to
         execution of players, etc.

--------------------------------------------------------------------------------
otw library

- Much cleanup of this library by breaking out and making explicit all the OTW
  related code.  This included cigi classes now logically grouped within 'cigi'
  folder.

--------------------------------------------------------------------------------
recorder library

--------------------------------------------------------------------------------
rpf library


--------------------------------------------------------------------------------
simulation library

   Otm class
      -- Renamed 'formName' slot to 'factoryName' to align code with this 
         termonology

   Player "interface" class - IPlayer
      -- Removed 2 undefined methods "isSmoothing()" and "getSmoothingRate()".
         Both were undefined and not used.

   Simulation class (deleted)
     -- extracted core model related functionality into models/WorldModel class
     -- renamed to SimExec - it contains ONLY execution oriented functionality

--------------------------------------------------------------------------------
terrain library

--------------------------------------------------------------------------------
