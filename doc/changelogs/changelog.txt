================================================================================
Changes since v16.11
================================================================================

--------------------------------------------------------------------------------
General framework-wide changes and improvements

-- Updated several found null pointer 0's with nullptr.

-- Old logger functionality has been removed in favor of binary data recorder
   library.  The classes base::Logger, simulation::SimLogger and simulation::TabLogger
   have been removed.

-- started using 'auto' keyword to declare types in a significant way; specifically
   used in places they declare variables that are initialized with rather long and
   obvious type definitions. For example:

   oe::models::Autopilot* ap = dynamic_cast<oe::models::Autopilot*>(av->getPilot());

   can be written as:

   auto ap = dynamic_cast<oe::models::Autopilot*>(av->getPilot());

   and improved upon like this:

   const auto ap = dynamic_cast<oe::models::Autopilot*>(av->getPilot());

   which results in const'ing the pointer variable itself, if appropriate (i.e.,
   oe::models::Autopilot* const ap).

-- renamed many of the classes that are abstract to 'Abstract<<CLASSNAME>>'.  For example,
   NetIO in simulation library became 'AbstractNetIO'.  This makes those classes more
   obvious in the role they place in relation to other classes.  Often they define a
   set of functionality that is common or shared with subclasses.
--------------------------------------------------------------------------------

#####################################################
Infrastructure oriented libraries
#####################################################

--------------------------------------------------------------------------------
base library

-- Changed osg references from aliased types (e.g., Vec3, Vec4, Matrix) to proper
   declaration of Vec3d, Vec4d, Matrixd.  Removed Vec3, Vec4 and Matrix include
   files which did nothing but include other files and define aliases (via typedef).
   This clarifies the codebase by making it more explicit.

-- Extracted constants and conversion methods from within unit classes, such as,
   Angle, Distance, Mass and Power and placed into unit_utils.hpp.  This clarifies
   the nature of these functions, simplifies the classes, and makes their usage 
   throughout codebase more clear.  The classes Angle, Mass, etc, are 'abstract',
   but they have not been renamed to 'AbstractXYZ', etc, to avoid massive changes
   to existing oe-based programs and their somewhat obvious abstractness as
   indicated by name.

-- Renamed fundamental 'ubf' classes such as Action, Behavior and State to AbsractAction,
   AbstractBehavior and AbstractState to make visible the role they play in defining
   the ubf pattern.

   Object class
     -- In Object, the method getSlotByIndex() has been removed.  Therefore any derived
        Object-based classes no longer need to define it.  For legacy code, methods of
        the form below (in all class definitions), should be deleted.

        base::Object* <<CLASSNAME>>::getSlotByIndex(const int si)
        {
           return BaseClass::getSlotByIndex(si);
        }

        This change simplifies the codebase by eliminating unused methods and
        reducing code clutter.

     -- Extracted '_Static' structure from Object and moved into a
        standalone class called MetaObject, which is what it is.  Updated
        Object itself to use this object (via, a variable called 'metaObject')
        in lue of '_static' to store class and object related information.  This has
        NO impact on API, but does make the code more readable, and provides
        a more clear opening to expand upon.

     -- Removed both registerClass() and WriteClassList() methods and underlying
        support structure to maintain a list of classes compiled into an application.
        This was used so that a developer could print a list of classes
        available within an application and metadata related to them,
        such as the number of instances currently in existance.  In theory,
        this information could be used to help debug memory leaks within a running
        application.  Not only can this capability be replicated outside of
        Object itself, other tools exist (e.g., Valgrind) that are much more
        comprehensive in this area. Removing the code associated with this functionality
        greatly simplifies Object, its associated macros, and instance creation.
        It also reduces the barrier to understanding what the code is doing.

     -- Removed getClassName() method - never used, available in ObjMetadata.

   ObjMetadata
     -- New class that replaces _Static class once defined in Object.

     -- Added getClassName() and getFactoryName() to this newly defined class.
        The goal is to move all 'meta' data about classes and objects including
        static class functionality into this class.

   Component class
     -- Component-based data logger functionality has been removed.  Removal of
        rippled into simulation library with the deletion of SimLogger and
        TabLogger classes.

   SlotTable class
     -- Removed useless methods such as copyData, deleteData -- probably remnant
        from long ago, when this might have been an Object-based class.

     -- Deleted copy and assignment operators

--------------------------------------------------------------------------------


--------------------------------------------------------------------------------
simulation library

-- In simulation library, created mostly abstract interface classes for NetIO,
   Otw, Player, Atmosphere and Terrain.  They serve as the connection between
   simulation infrastructure (i.e., architecture) and models.  Moved all
   model implementation code into respective libraries -- models, terrain, otw.
   The goal was to divorce, simplify, and focus the contents of the 'simulation'
   library to defining the basic architecture of a simulation.  It is now much
   less concerned about models and interoperability interfaces.
   In domain driven design (DDD) literature, this is called refactoring a ball
   of mud into more clear boundary contexts. In other words, it simplifies
   understanding and improves clarity.

   Otm class
      -- Renamed 'formName' slot to 'factoryName' to align code with this 
         termonology.

   AbstractPlayer
      -- Removed 2 undefined methods "isSmoothing()" and "getSmoothingRate()".
         Both were undefined and not used.

   Simulation class (deleted)
     -- Extracted core model related functionality into models/WorldModel class.

   SimExec (new class)
     -- The infrastructure code related to executing a model.

--------------------------------------------------------------------------------

#####################################################
Graphics oriented libraries
#####################################################

--------------------------------------------------------------------------------
graphics library
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
glut library
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
instruments library
--------------------------------------------------------------------------------

#####################################################
Interoperability oriented libraries
#####################################################

--------------------------------------------------------------------------------
interop library

-- Moved all interoperability implementation code into this new library.
   This removes circular references between 'simulation', 'models',
   'interoperability' and 'otw' functionality.

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
dis library
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
hla library
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
rprfom library
--------------------------------------------------------------------------------

#####################################################
Out the window (OTW) oriented libraries
#####################################################

--------------------------------------------------------------------------------
otw library

-- Much cleanup of this library by breaking out and making explicit all the OTW
   related code.  This includes all cigi classes now logically grouped within 'cigi'
   folder.

--------------------------------------------------------------------------------

#####################################################
Models & general capabilities oriented libraries
#####################################################

--------------------------------------------------------------------------------
models library

-- Moved all players, systems and component-based models from simulation library
   into this library.

-- Grouped somewhat obvious highly related models into subfolders within the models
   library.  This includes folders for players, systems, dynamic models, environment,
   navigation, etc.  This can be improved, but it's a good start.

-- Removed NavRadio-based classes: NavRadio, IlsRadio and TacanRadio.  These classes
   used DAFIF data to navigate to airports and navaids.  In the real world, this
   capability can also be used to land an aircraft through instrumentation.  The models
   as designed can not do a full landing, but can navigate to a location.  They
   have been moved into the testDafif example to keep them and show how to extend
   a world model that includes DAFIF oriented information.

   WorldModel (new class)
      -- Contains the guts of what used to be in Simulation class concerning
         the modeled world -- class does not contain any code related to
         execution of players, etc.
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
dafif library

-- Removed all dependencies to this library throughout framework. Add new 'testDafif'
   example that loads DAFIF data and performs allows one to interact with it to
   understand functionality.

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
iodevice library
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
linearsystem library
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
rpf library
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
recorder library
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
terrain library
--------------------------------------------------------------------------------

